// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/trips.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace tripsGrpc {
  public static partial class TripServices
  {
    static readonly string __ServiceName = "tripsGrpc.TripServices";

    static readonly grpc::Marshaller<global::tripsGrpc.Request> __Marshaller_tripsGrpc_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::tripsGrpc.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::tripsGrpc.Response> __Marshaller_tripsGrpc_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::tripsGrpc.Response.Parser.ParseFrom);

    static readonly grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response> __Method_GetAccountByNamePassword = new grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountByNamePassword",
        __Marshaller_tripsGrpc_Request,
        __Marshaller_tripsGrpc_Response);

    static readonly grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response> __Method_GetAllTrips = new grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllTrips",
        __Marshaller_tripsGrpc_Request,
        __Marshaller_tripsGrpc_Response);

    static readonly grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response> __Method_GetTripsByLandmarkDepartureHour = new grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTripsByLandmarkDepartureHour",
        __Marshaller_tripsGrpc_Request,
        __Marshaller_tripsGrpc_Response);

    static readonly grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response> __Method_Logout = new grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Logout",
        __Marshaller_tripsGrpc_Request,
        __Marshaller_tripsGrpc_Response);

    static readonly grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response> __Method_AddBooking = new grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddBooking",
        __Marshaller_tripsGrpc_Request,
        __Marshaller_tripsGrpc_Response);

    static readonly grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response> __Method_Register = new grpc::Method<global::tripsGrpc.Request, global::tripsGrpc.Response>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Register",
        __Marshaller_tripsGrpc_Request,
        __Marshaller_tripsGrpc_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::tripsGrpc.TripsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TripServices</summary>
    [grpc::BindServiceMethod(typeof(TripServices), "BindService")]
    public abstract partial class TripServicesBase
    {
      public virtual global::System.Threading.Tasks.Task<global::tripsGrpc.Response> GetAccountByNamePassword(global::tripsGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::tripsGrpc.Response> GetAllTrips(global::tripsGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::tripsGrpc.Response> GetTripsByLandmarkDepartureHour(global::tripsGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::tripsGrpc.Response> Logout(global::tripsGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::tripsGrpc.Response> AddBooking(global::tripsGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Register(global::tripsGrpc.Request request, grpc::IServerStreamWriter<global::tripsGrpc.Response> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TripServicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAccountByNamePassword, serviceImpl.GetAccountByNamePassword)
          .AddMethod(__Method_GetAllTrips, serviceImpl.GetAllTrips)
          .AddMethod(__Method_GetTripsByLandmarkDepartureHour, serviceImpl.GetTripsByLandmarkDepartureHour)
          .AddMethod(__Method_Logout, serviceImpl.Logout)
          .AddMethod(__Method_AddBooking, serviceImpl.AddBooking)
          .AddMethod(__Method_Register, serviceImpl.Register).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TripServicesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAccountByNamePassword, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::tripsGrpc.Request, global::tripsGrpc.Response>(serviceImpl.GetAccountByNamePassword));
      serviceBinder.AddMethod(__Method_GetAllTrips, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::tripsGrpc.Request, global::tripsGrpc.Response>(serviceImpl.GetAllTrips));
      serviceBinder.AddMethod(__Method_GetTripsByLandmarkDepartureHour, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::tripsGrpc.Request, global::tripsGrpc.Response>(serviceImpl.GetTripsByLandmarkDepartureHour));
      serviceBinder.AddMethod(__Method_Logout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::tripsGrpc.Request, global::tripsGrpc.Response>(serviceImpl.Logout));
      serviceBinder.AddMethod(__Method_AddBooking, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::tripsGrpc.Request, global::tripsGrpc.Response>(serviceImpl.AddBooking));
      serviceBinder.AddMethod(__Method_Register, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::tripsGrpc.Request, global::tripsGrpc.Response>(serviceImpl.Register));
    }

  }
}
#endregion
